plugins {
    alias libs.plugins.android.application
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.example.branchdirectorymap'
    compileSdk 35
    defaultConfig {
        applicationId "com.example.branchdirectorymap"
        minSdk 23
        targetSdk 35
        versionCode 1
        versionName "0.1-beta1-preview"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def mapsApiKey = ""
        def linkApiKey = ""
        def apiFile = rootProject.file("api.dat")
        if(apiFile.exists()){
            def lines = apiFile.readLines()
            if(lines.size() >= 1){
                mapsApiKey = lines[0].trim()
                manifestPlaceholders = [MAPS_API_KEY: mapsApiKey]
            } else {
                throw new GradleException("BUILD FAILED: 'api.dat' is empty")
            }
            if("${PROXY}" == "false") {
                if("${FIREBASE}" == "false" && lines.size() >= 2){
                    linkApiKey = lines[1].trim()
                    def hexEncodedApiKey = linkApiKey.bytes.encodeHex().toString()
                    buildConfigField "boolean", "USE_FIREBASE", "false"
                    externalNativeBuild {
                        cmake {
                            arguments "-DHEXAGON=${hexEncodedApiKey}"
                        }
                    }
                } else {
                    buildConfigField "boolean", "USE_FIREBASE", "true"
                }
                buildConfigField "boolean", "USE_PROXY", "false"
            } else {
                buildConfigField "boolean", "USE_FIREBASE", "false"
                buildConfigField "boolean", "USE_PROXY", "true"
                buildConfigField "String", "PROXY_URL", "\"" + "${PROXYURL}" + "\""
            }
        } else {
            throw new GradleException("BUILD FAILED: 'api.dat' not found")
        }

        if ("${ROOT}" == "true") {
            buildConfigField "boolean", "ALLOW_ROOT", "true"
        } else {
            buildConfigField "boolean", "ALLOW_ROOT", "false"
        }
        buildConfigField "String", "EMBEDDED_DB", "\"" + "${EMBEDDEDDB}" + "\""
        if ("${EMBEDDED}" == "true") {
            buildConfigField "boolean", "EMBEDDED_FILE", "true"
            def FILE_NAMES = (project.hasProperty("FILENAMES") ? "${FILENAMES}" : "").trim()
            if (FILE_NAMES.isEmpty()) {
                buildConfigField "String", "FILE_NAMES", "\"\""
            } else {
                buildConfigField "String", "FILE_NAMES", "\"" + "${FILENAMES}" + "\""
            }
            def DEFAULT_FILE = (project.hasProperty("DEFAULTFILE") ? "${DEFAULTFILE}" : "").trim()
            if (DEFAULT_FILE.isEmpty()) {
                buildConfigField "String", "DEFAULT_FILE", "\"\""
            } else {
                buildConfigField "String", "DEFAULT_FILE", "\"" + "${DEFAULTFILE}" + "\""
            }
        } else {
            buildConfigField "boolean", "EMBEDDED_FILE", "false"
            buildConfigField "String", "FILE_NAMES", '""'
            buildConfigField "String", "DEFAULT_FILE", '""'
        }
        buildConfigField "int", "MIN_CLUSTER_SIZE", ("${MINCLUSTERSIZE}" ?: "5")
        buildConfigField "int", "MAX_THREADS", "${MAXTHREADS}"
        buildConfigField "int", "BASE_DELAY_MS", "${BASEDELAY}"
        buildConfigField "int", "RANDOM_DELAY_MS", "${RANDOMDELAY}"
        buildConfigField "int", "INTERMEDIATE_STEPS", "${INTERMEDIATES}"
        if ("${LIGHTSENSOR}" == "true") {
            buildConfigField "boolean", "USE_LIGHT_SENSOR", "true"
        } else {
            buildConfigField "boolean", "USE_LIGHT_SENSOR", "false"
        }
        buildConfigField "String", "TRAFFIC_METRICS", "\"" + "${TRAFFICMETRICS}" + "\""
        if ("${MAPID}" != "") {
            resValue "string", "map_id", "${MAPID}"
            buildConfigField "boolean", "USE_MAP_ID", "true"
            buildConfigField "String", "STYLE_JSON", '""'
        } else {
            resValue "string", "map_id", ""
            buildConfigField "boolean", "USE_MAP_ID", "false"
            buildConfigField "String", "STYLE_JSON", "\"" + "${STYLEJSON}" + "\""
        }
        if ("${ADVANCEDROUTES}" == "true") {
            buildConfigField "boolean", "USE_ADVANCED_ROUTING", "true"
        } else {
            buildConfigField "boolean", "USE_ADVANCED_ROUTING", "false"
        }
        buildConfigField "int", "TIMEOUT_S", "${TIMEOUT}"
        buildConfigField "String", "DATABASE_NAME", "\"" + "${DBFILE}" + "\""
        if ("${EXPORT}" == "true") {
            buildConfigField "boolean", "EXPORT_DB", "true"
        } else {
            buildConfigField "boolean", "EXPORT_DB", "false"
        }
        if ("${DUPLICATES}" == "true") {
            buildConfigField "boolean", "ALLOW_DUPLICATES", "true"
        } else {
            buildConfigField "boolean", "ALLOW_DUPLICATES", "false"
        }
        if ("${SETTINGSPERFILE}" == "true") {
            buildConfigField "boolean", "SETTINGS_PER_FILE", "true"
        } else {
            buildConfigField "boolean", "SETTINGS_PER_FILE", "false"
        }
        buildConfigField "String", "MARKER_COLOURS", "\"" + "${COLOURS}" + "\""
        buildConfigField "String", "MULTI_ROW_SETS", "\"" + "${MULTIROWSETS}" + "\""
        buildConfigField "String", "USE_PHONE", "\"" + "${PHONE}" + "\""
        buildConfigField "String", "USE_REFINED", "\"" + "${REFINED}" + "\""
        buildConfigField "String", "TITLE_SPLIT", "\"" + "${TITLESPLIT}" + "\""
        def RAWREGION = GEOREGION
        def ESCREGION = RAWREGION.replaceAll('"', '\\\\"')
        buildConfigField "String", "GEOCODE_REGION", "\"${ESCREGION}\""
        def DELIMVAL = (project.hasProperty("DELIM") ? "${DELIM}" : "")
        DELIMVAL = DELIMVAL.replaceAll(/\\ /, " ").replaceAll(/"([^"]*)"/, '$1')
        buildConfigField "String", "DELIMITER", "\"${DELIMVAL}\""
        def CODEDELIMVAL = (project.hasProperty("CODEDELIM") ? "${CODEDELIM}" : "")
        CODEDELIMVAL = CODEDELIMVAL.replaceAll(/\\ /, " ").replaceAll(/"([^"]*)"/, '$1')
        buildConfigField "String", "CODE_DELIMITER", "\"${CODEDELIMVAL}\""
        buildConfigField "String", "CODE_PREFIX", "\"" + "${CODEPREFIX}" + "\""
        buildConfigField "String", "COLUMNS_PER_ROW", "\"" + "${COLUMNSPERROW}" + "\""
        buildConfigField "String", "IGNORE_ROWS_BEGIN", "\"" + "${IGNOREROWSBEGIN}" + "\""
        buildConfigField "String", "IGNORE_ROWS_END", "\"" + "${IGNOREROWSEND}" + "\""
        buildConfigField "String", "TITLE_INDEX", "\"" + "${TITLEINDEX}" + "\""
        buildConfigField "String", "TITLE_2_INDEX", "\"" + "${TITLE2INDEX}" + "\""
        buildConfigField "String", "ADDRESS_INDEX", "\"" + "${ADDRESSINDEX}" + "\""
        buildConfigField "String", "REFINED_ADDRESS_INDEX", "\"" + "${REFINEDADDRESSINDEX}" + "\""
        buildConfigField "String", "PHONE_INDEX", "\"" + "${PHONEINDEX}" + "\""
        buildConfigField "String", "ROWS_PER_SET", "\"" + "${ROWSPERSET}" + "\""
        buildConfigField "String", "TITLE_OFFSET", "\"" + "${TITLEOFFSET}" + "\""
        buildConfigField "String", "TITLE_2_OFFSET", "\"" + "${TITLE2OFFSET}" + "\""
        buildConfigField "String", "ADDRESS_OFFSET", "\"" + "${ADDRESSOFFSET}" + "\""
        buildConfigField "String", "REFINED_ADDRESS_OFFSET", "\"" + "${REFINEDADDRESSOFFSET}" + "\""
        buildConfigField "String", "PHONE_OFFSET", "\"" + "${PHONEOFFSET}" + "\""
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    if("${PROXY}" == "false" && "${FIREBASE}" == "false") {
        externalNativeBuild {
            cmake {
                path file('src/main/cpp/CMakeLists.txt')
                version '3.31.6'
            }
        }
        packagingOptions {
            exclude 'google-services.json'
        }
    }
}

dependencies {
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.play.services.maps
    implementation libs.play.services.location
    implementation libs.places
    implementation libs.opencsv
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.activity
    implementation libs.android.maps.utils
    implementation libs.okhttp
    implementation libs.gson
    implementation libs.retrofit2.retrofit
    implementation libs.converter.gson
    implementation libs.commons.lang3
    if ("${PROXY}" == "false") {
        implementation libs.androidx.security.crypto
        if("${FIREBASE}" == "true") {
            implementation platform(libs.firebase.bom)
            implementation libs.google.firebase.config
            implementation libs.google.firebase.analytics
        }
    }
    if ("${ROOT}" == "false") {
        implementation libs.rootbeer.lib
    }
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}